/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { LoginAttempt } from "./LoginAttempt";
import { LoginAttemptCountArgs } from "./LoginAttemptCountArgs";
import { LoginAttemptFindManyArgs } from "./LoginAttemptFindManyArgs";
import { LoginAttemptFindUniqueArgs } from "./LoginAttemptFindUniqueArgs";
import { CreateLoginAttemptArgs } from "./CreateLoginAttemptArgs";
import { UpdateLoginAttemptArgs } from "./UpdateLoginAttemptArgs";
import { DeleteLoginAttemptArgs } from "./DeleteLoginAttemptArgs";
import { User } from "../../user/base/User";
import { LoginAttemptService } from "../loginAttempt.service";
@graphql.Resolver(() => LoginAttempt)
export class LoginAttemptResolverBase {
  constructor(protected readonly service: LoginAttemptService) {}

  async _loginAttemptsMeta(
    @graphql.Args() args: LoginAttemptCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [LoginAttempt])
  async loginAttempts(
    @graphql.Args() args: LoginAttemptFindManyArgs
  ): Promise<LoginAttempt[]> {
    return this.service.loginAttempts(args);
  }

  @graphql.Query(() => LoginAttempt, { nullable: true })
  async loginAttempt(
    @graphql.Args() args: LoginAttemptFindUniqueArgs
  ): Promise<LoginAttempt | null> {
    const result = await this.service.loginAttempt(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => LoginAttempt)
  async createLoginAttempt(
    @graphql.Args() args: CreateLoginAttemptArgs
  ): Promise<LoginAttempt> {
    return await this.service.createLoginAttempt({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => LoginAttempt)
  async updateLoginAttempt(
    @graphql.Args() args: UpdateLoginAttemptArgs
  ): Promise<LoginAttempt | null> {
    try {
      return await this.service.updateLoginAttempt({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LoginAttempt)
  async deleteLoginAttempt(
    @graphql.Args() args: DeleteLoginAttemptArgs
  ): Promise<LoginAttempt | null> {
    try {
      return await this.service.deleteLoginAttempt(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: LoginAttempt): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
